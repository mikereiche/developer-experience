/*
 * Copyright 2022 the original author or authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.example.demo;

import java.time.Duration;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.couchbase.client.java.Bucket;
import com.couchbase.client.java.Cluster;
import com.couchbase.client.java.ClusterOptions;
import com.couchbase.client.java.Scope;
import com.couchbase.client.java.env.ClusterEnvironment;

/**
 * @author Michael Reiche
 */
@SpringBootApplication
@RestController
@RequestMapping("")
public class DemoApplication {

  static String bucketName = "<bucketname>";
  static String scopeName = "<scopename>";
  static boolean tlsEnabled = true;

  @Bean
  Bucket getBucket(Cluster cluster){
    return cluster.bucket(bucketName);
  }

  @Bean
  Scope getScope(Bucket bucket) {
    return bucket.scope(scopeName);
  }

  @Bean
  Cluster getCluster(){

    ClusterEnvironment env = ClusterEnvironment.builder()
      .securityConfig(sc -> sc.enableTls(tlsEnabled))
      .ioConfig(ioc -> ioc.enableDnsSrv(true))
      .thresholdLoggingTracerConfig(thresholdConfig -> thresholdConfig.emitInterval(Duration.ofSeconds(10))
        .kvThreshold(Duration.ofSeconds(2))
        .queryThreshold(Duration.ofSeconds(4))
        .searchThreshold(Duration.ofSeconds(4)))
      .applyProfile("wan-development")
      .build();

    // Initialize the Connection
    return Cluster.connect(
        "couchbases://" + "<connection-host-name>",
      ClusterOptions.clusterOptions(
            "<user/api-key>", "<password/secret-key>")
        .environment(env));
  }

  public static void main(String[] args) {
     SpringApplication.run( DemoApplication.class, args );
  }

}
